name: deploy

on:
  push:
    branches:
      - main
      - 4-docker

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Azure VM
        run: |
          # SSH into the Azure VM and deploy
          ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }} << EOF
            cd /home/azureuser/agilepath || exit

            # Pull the latest changes from the main branch
            echo "Pulling latest changes from main branch..."
            git fetch origin 4-docker
            git pull origin 4-docker
            git switch 4-docker

            # Start Docker services for production with environment variables
            echo "Starting Docker services for production..."
            sudo docker compose --profile prod down
            sudo docker compose --profile prod up -d \
              -e JDBC_DATABASE_URL="${{ secrets.JDBC_DATABASE_URL }}" \
              -e JDBC_DATABASE_USERNAME="${{ secrets.JDBC_DATABASE_USERNAME }}" \
              -e JDBC_DATABASE_PASSWORD="${{ secrets.JDBC_DATABASE_PASSWORD }}" \
              -e REDIS_HOST="${{ secrets.REDIS_HOST }}" \
              -e REDIS_PORT="${{ secrets.REDIS_PORT }}" \
              -e CORS_ENABLED="${{ secrets.CORS_ENABLED }}" \
              -e CORS_ALLOWED_ORIGINS="${{ secrets.CORS_ALLOWED_ORIGINS }}" \
              -e CORS_ALLOWED_METHODS="${{ secrets.CORS_ALLOWED_METHODS }}" \
              -e CORS_ALLOWED_HEADERS="${{ secrets.CORS_ALLOWED_HEADERS }}" \
              -e CORS_ALLOW_CREDENTIALS="${{ secrets.CORS_ALLOW_CREDENTIALS }}" \
              -e CLERK_ISSUER="${{ secrets.CLERK_ISSUER }}" \
              -e SERVER_PORT="${{ secrets.SERVER_PORT }}" \
              -e VITE_BACKEND_URL="${{ secrets.VITE_BACKEND_URL }}" \
              -e VITE_CLERK_PUBLISHABLE_KEY="${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}" \
              -e SPRING_PROFILES_ACTIVE="prod" \
              -e LOG_LEVEL="INFO"
          EOF

      - name: clean up unused images
        run: |
          sudo docker image prune -f
