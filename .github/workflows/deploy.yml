name: deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Azure VM
        run: |
          # SSH into the Azure VM and deploy
          ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }} << EOF
            cd /home/azureuser/agilepath || exit

            # Pull the latest changes from the main branch
            echo "Pulling latest changes from main branch..."
            git fetch origin main
            git pull origin main
            git switch main

            # Delete existing .env file if it exists
            echo "Deleting existing .env file if it exists..."
            rm -f .env

            # Create a new .env file
            echo "Creating new .env file..."
            echo "JDBC_DATABASE_URL=${{ secrets.JDBC_DATABASE_URL }}" >> .env
            echo "JDBC_DATABASE_USERNAME=${{ secrets.JDBC_DATABASE_USERNAME }}" >> .env
            echo "JDBC_DATABASE_PASSWORD=${{ secrets.JDBC_DATABASE_PASSWORD }}" >> .env
            echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
            echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
            echo "CORS_ENABLED=${{ secrets.CORS_ENABLED }}" >> .env
            echo "CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}" >> .env
            echo "CORS_ALLOWED_METHODS=${{ secrets.CORS_ALLOWED_METHODS }}" >> .env
            echo "CORS_ALLOWED_HEADERS=${{ secrets.CORS_ALLOWED_HEADERS }}" >> .env
            echo "CORS_ALLOW_CREDENTIALS=${{ secrets.CORS_ALLOW_CREDENTIALS }}" >> .env
            echo "CLERK_ISSUER=${{ secrets.CLERK_ISSUER }}" >> .env
            echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> .env
            echo "VITE_BACKEND_URL=${{ secrets.VITE_BACKEND_URL }}" >> .env
            echo "VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}" >> .env
            echo "SPRING_PROFILES_ACTIVE=prod" >> .env
            echo "LOG_LEVEL=INFO" >> .env

            # Start Docker services for production
            echo "Starting Docker services for production..."
            sudo docker compose --profile prod down
            sudo docker compose --profile prod --env-file .env up -d
          EOF

      - name: clean up unused images
        run: |
          sudo docker image prune -f
