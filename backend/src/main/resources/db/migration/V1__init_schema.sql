-- V1__init_schema.sql

-- Users (from Clerk + GitHub)
CREATE TABLE users
(
    id              VARCHAR(50) PRIMARY KEY, -- External ID from Clerk
    github_username VARCHAR(100),
    email           VARCHAR(255) NOT NULL UNIQUE,
    full_name       VARCHAR(255),            -- From GitHub via Clerk; may be split later if needed
    avatar_url      TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Projects
CREATE TABLE projects
(
    id          UUID PRIMARY KEY,
    name        VARCHAR(255) NOT NULL,
    description TEXT,
    framework   VARCHAR(50)  NOT NULL, -- ENUM('SCRUM', 'XP', 'NONE')
    created_by  VARCHAR(50)  NOT NULL REFERENCES users (id) ON DELETE SET NULL,
    modified_by VARCHAR(50)  REFERENCES users (id) ON DELETE SET NULL,
    created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modified_at TIMESTAMP,
    CHECK (framework IN ('SCRUM', 'XP', 'NONE'))
);

-- Users <-> Projects
CREATE TABLE users_projects
(
    user_id    VARCHAR(50) NOT NULL REFERENCES users (id) ON DELETE CASCADE,
    project_id UUID        NOT NULL REFERENCES projects (id) ON DELETE CASCADE,
    role       VARCHAR(50),
    PRIMARY KEY (user_id, project_id),
    CHECK (role IN ('OWNER', 'ADMIN', 'CONTRIBUTOR'))
);

-- Sprints
CREATE TABLE sprints
(
    id          UUID PRIMARY KEY,
    project_id  UUID         NOT NULL REFERENCES projects (id) ON DELETE CASCADE,
    name        VARCHAR(255) NOT NULL,
    goal        TEXT,
    start_date DATE NOT NULL,
    end_date   DATE NOT NULL,
    created_by  VARCHAR(50)  NOT NULL REFERENCES users (id) ON DELETE SET NULL,
    modified_by VARCHAR(50)  REFERENCES users (id) ON DELETE SET NULL,
    created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modified_at TIMESTAMP
);

-- Sprint Columns
CREATE TABLE sprint_columns
(
    id           UUID PRIMARY KEY,
    sprint_id    UUID         NOT NULL REFERENCES sprints (id) ON DELETE CASCADE,
    name         VARCHAR(255) NOT NULL,
    status       VARCHAR(50)  NOT NULL, -- ENUM('TODO', 'IN_PROGRESS', 'DONE')
    column_index INT GENERATED BY DEFAULT AS IDENTITY,
    CHECK (status IN ('TODO', 'IN_PROGRESS', 'DONE'))
);

-- Stories
CREATE TABLE stories
(
    id          UUID PRIMARY KEY,
    project_id  UUID         NOT NULL REFERENCES projects (id) ON DELETE CASCADE,
    title       VARCHAR(255) NOT NULL,
    description TEXT,
    status      VARCHAR(50)  NOT NULL, -- Not an ENUM, but should reflect the current status (and thereby which column it is in)
    priority    INT       DEFAULT 0,
    created_by  VARCHAR(50)  NOT NULL REFERENCES users (id) ON DELETE SET NULL,
    modified_by VARCHAR(50)  REFERENCES users (id) ON DELETE SET NULL,
    created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modified_at TIMESTAMP
);

-- Tasks
CREATE TABLE tasks
(
    id               UUID PRIMARY KEY,
    story_id         UUID         NOT NULL REFERENCES stories (id) ON DELETE CASCADE,
    sprint_column_id UUID         NOT NULL REFERENCES sprint_columns (id) ON DELETE CASCADE,
    title            VARCHAR(255) NOT NULL,
    description      TEXT,
    estimate_tshirt  VARCHAR(50), -- Store enum as string
    estimate_points  VARCHAR(50), -- Store enum as string
    created_by       VARCHAR(50)  NOT NULL REFERENCES users (id) ON DELETE SET NULL,
    modified_by      VARCHAR(50)  REFERENCES users (id) ON DELETE SET NULL,
    created_at       TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modified_at      TIMESTAMP
);

-- Task Assignees
CREATE TABLE task_assignees
(
    task_id UUID        NOT NULL REFERENCES tasks (id) ON DELETE CASCADE,
    user_id VARCHAR(50) NOT NULL REFERENCES users (id) ON DELETE CASCADE,
    PRIMARY KEY (task_id, user_id)
);

-- Subtasks
CREATE TABLE subtasks
(
    id          UUID PRIMARY KEY,
    task_id     UUID         NOT NULL REFERENCES tasks (id) ON DELETE CASCADE,
    title       VARCHAR(255) NOT NULL,
    description TEXT,
    is_done     BOOLEAN   DEFAULT FALSE,
    created_by  VARCHAR(50)  NOT NULL REFERENCES users (id) ON DELETE SET NULL,
    modified_by VARCHAR(50)  REFERENCES users (id) ON DELETE SET NULL,
    created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modified_at TIMESTAMP
);

-- Comments (with constraint for polymorphic relation)
CREATE TABLE comments
(
    id          UUID PRIMARY KEY,
    content     TEXT        NOT NULL,
    story_id    UUID REFERENCES stories (id) ON DELETE CASCADE,
    task_id     UUID REFERENCES tasks (id) ON DELETE CASCADE,
    created_by  VARCHAR(50) NOT NULL REFERENCES users (id) ON DELETE SET NULL,
    modified_by VARCHAR(50) REFERENCES users (id) ON DELETE SET NULL,
    created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modified_at TIMESTAMP,
    CHECK (
        (story_id IS NOT NULL AND task_id IS NULL) OR
        (story_id IS NULL AND task_id IS NOT NULL)
        )
);

-- Create indexes
CREATE INDEX idx_users_email ON users (email);
CREATE INDEX idx_users_github_username ON users (github_username);
CREATE INDEX idx_projects_created_by ON projects (created_by);
CREATE INDEX idx_users_projects_user ON users_projects (user_id);
CREATE INDEX idx_users_projects_project ON users_projects (project_id);
CREATE INDEX idx_sprints_project_id ON sprints (project_id);
CREATE INDEX idx_stories_project_id ON stories (project_id);
CREATE INDEX idx_stories_status ON stories (status);
CREATE INDEX idx_tasks_story_id ON tasks (story_id);
CREATE INDEX idx_tasks_sprint_column_id ON tasks (sprint_column_id);
CREATE INDEX idx_task_assignees_task_id ON task_assignees (task_id);
CREATE INDEX idx_task_assignees_user_id ON task_assignees (user_id);
CREATE INDEX idx_subtasks_task_id ON subtasks (task_id);
CREATE INDEX idx_comments_story_id ON comments (story_id);
CREATE INDEX idx_comments_task_id ON comments (task_id);